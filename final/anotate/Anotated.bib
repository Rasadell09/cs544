%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/
%% Group 35
%% Name: Yunfan Li, Xiang Li, Zhicheng Fu

@article{knudsen2014practical,
	Annote = {Principal security engineer, Jonathan Knudsen in his article, "Practical Considerations Of Fuzzing: Generating Insight into Areas of Risk" demonstrates a completed way to test an apllication with a fuzzing test tool. He enumerates seven steps which are Creating a Test Plan, Defining Failure, Detecting Failure, Server, Client, and File Testing, Fidelity and Fixing Vulnerabilities to illustrate how can you fix your bugs by using fuzzing. This article is very important to my research because it tells me some methods to locating my vulnerabilities, which  let my application more robust.},
	Author = {Jonathan Knudsen},
	Date-Added = {2015-05-17 21:52:55 +0000},
	Date-Modified = {2015-05-17 22:05:36 +0000},
	Journal = {Horizons},
	Title = {Practical Considerations Of Fuzzing: Generating Insight into Areas of Risk},
	Year = {2014}}

@article{acharya2012bridge,
	Annote = {Shivani Acharya and Vidhi Pandya in their article, "Bridge between Black Box and White Box -- Gray Box Testing Technique" establish that Fuzzing testing is employes as a black box software testing technique. We can use fuzzing as a test for security problems in software. In this article, Acharya and Pandya provide some advantages and disadvantages for fuzzing test. These qualities of fuzzing give me a judgement of fuzzing test. },
	Author = {Shivani Acharya, Vidhi Pandya},
	Date-Added = {2015-05-17 08:08:08 +0000},
	Date-Modified = {2015-05-17 08:12:53 +0000},
	Journal = {International Journal of Electronics and Computer Science Enginnering},
	Pages = {175-185},
	Title = {Bridge between Black Box and White Box-Gray Box testing Technique},
	Year = {2014}}

@article{takanen2009fuzzing,
	Annote = {Codenomicon chief research officer, Ari Takanen in his article,"Fuzzing: the Past, the Present and the Future", briefly introduces the histroy of fuzzing. He says that the history of fuzzing is quite long. From 1988 to now, fuzzing exprerienced a very long term development.  In 1988, the term "fuzzing" appeared. During 1998-2001, University of Oulu conducted a PROTOS project which was fucos on a now generation fuzzing techniques. After 2007, a new highly competed test and measurement market domain of fuzzing was created. This article gives us a clear definition of fuzzing, which helps me understand fuzzing.},
	Author = {Ari Takanen},
	Date-Added = {2015-05-17 07:26:28 +0000},
	Date-Modified = {2015-05-17 07:32:50 +0000},
	Journal = {SSTIC'09},
	Title = {Fuzzing: the Past, the Present and the Future},
	Year = {2009}}

@article{cite-key,
	Annote = {Jared Demott, in his article, "The Evolving Art of Fuzzing", explains the basic evolving history of fuzzing. From 1990, the first person, Barton Miiler, carried out with the idea of fuzzing to now, fuzzing experienced a very big developing. Demmott brifely introduces more than 25 types of fuzzing to us. Demott says that Fuzzing is now used by software companies and open source projects to improve the quality of the software, like Microsoft. This article is very hlepful, because this article gives us a very system introduction for fuzzing.  },
	Author = {Jared Demott},
	Date-Added = {2015-05-17 07:01:58 +0000},
	Date-Modified = {2015-05-17 07:02:26 +0000},
	Journal = {DEF CON},
	Title = {The Evolving Art of Fuzzing},
	Year = {2006}}

@techreport{clarke2009fuzzing,
	Annote = {Mathematician, Toby Clarke in his report, Fuzzing for Sorftware Vulnerability Discovery, introduces that "The `discovery' of fuzzing as a means to test software reliability is captured in a paper produced in 1989 by Miller, Fredriksen and So." He illustrates that one of the authors, Miller, discovered fuzzing by an accident. When Miller tested an application, he typed some wrong characters in the command line, which casued a number of applications to crash. So this failure let Miller, et al to decise a formal testing regime to test application robustness to random input. This report is significant to our analysis because Clarke tells us an overview history of Fuzzing. },
	Author = {Toby Clarke},
	Date-Added = {2015-05-17 07:01:14 +0000},
	Date-Modified = {2015-05-17 07:01:50 +0000},
	Institution = {Department of Mathematics, Royal Holloway, University of London},
	Month = {February},
	Title = {Fuzzing for software vulnerability discovery},
	Year = {2009}}

@book{sutton2007fuzzing,
	Annote = {Proffesor Michael Sutton, Adam Greene and Pedram Amini in their book, Chapter 2, FUZZING: Brute Force Vulnerability Discovery, introduces short history of fuzzing. They use a diagram shows that the first edition of fuzzing came from proessor Barton Miller. But it was just a crude edition. In 1999, Oulu University begins work on PROTOS Test Suites. Then in 2002 Microsoft provided funding to the PROTOS.During 2002, Dave Aitel released SPIKE at BH USA. Later many other commay realased different editions of Fuzzing, such as FileFuzz, SPIKEfile, not SPIKEfile, ActiveX fuzzing and COMRaider etc. Although there are a lots of edition now, fuzzing is still  being developed. These book help us sort out a simple fuzzing history.  },
	Author = {Michael Sutton, Adam Green, Pedram Amini},
	Date-Added = {2015-05-17 07:00:07 +0000},
	Date-Modified = {2015-05-17 07:00:58 +0000},
	Edition = {1 edition},
	Month = {July},
	Publisher = {Wesley Professional},
	Title = {FUZZING: Brute Force Vulnerability Discovery},
	Year = {2007}}

@inproceedings{godefroid2008grammar,
        Annote = {Patrice, Kiezun and Levin in their article "Grammar-based Whitebox Fuzzing" described a novel whitebox fuzzing dynamic algorithm, which use the Grammar-based constraints, that can improve the efficiency when compare with the traditional whitebox fuzzing test algorithm. Patrice is working in Microsoft Research, Kiezun is a computer science professor in MIT and Levin is a researcher of Microsoft Center for Software Excellence. They are all proficient in using whitebox fuzzing test and know the advantage and disadvantage of whitebox fuzzing test. In the book "FUZZING: Brute Force Vulnerability Discovery", the author introduced the basic definition of whitebox fuzzing test. But in this article, Patrice and other three authors give us a new algorithm that can cover 81% of code generation module of the IE7 JavaScript interpreter instead of 53% in using traditional algorithm.},
        Title={Grammar-based whitebox fuzzing},
        Author={Godefroid, Patrice and Kiezun, Adam and Levin, Michael Y},
        Booktitle={ACM Sigplan Notices},
        Date-Added={2015-05-16 10:52:19 +0000},
        Date-Modified={2015-05-16 11:30:29 +0000},
        Volume={43},
        Number={6},
        Pages={206--215},
        Year={2008},
        Organization={ACM}}

@book{rathaus2011open,
  title={Open source fuzzing tools},
  author={Rathaus, Noam and Evron, Gadi},
  year={2011},
  publisher={Syngress},
  annote={The authors talk about fuzzing in this book. One of the authors, Noam Rathaus, is the co-founder and CTO of Beyond Security. Another author, Gadi Evron, is the founder and CEO at Cymmetria, working on network security. The authors discuss what is fuzzing and how it works. Fuzzing technology is like black box testing technology. It gives some inputs to the tested program and then check if the inputs work. If it does not work, fuzzing will check whether the program has the process of dealing with the errors, which might become the vulnerability of the software. Readers could learn the history of the fuzzing. And the author shows the steps to build an environment for fuzzing. Furthermore, the authors talk how to build fuzzing. For example, a fuzzing needs to know the data sets, the meaning of the data bytes and try to repeat tests. After reading the book, readers could get basic steps to build a fuzzing.}}
